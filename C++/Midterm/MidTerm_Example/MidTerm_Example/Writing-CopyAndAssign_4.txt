// MidtermCopyAndAssign.h

#pragma once

namespace midterm
{
	enum
	{
		CHAR_MAX_SIZE = 512;
	}
	class midtermCopyAndAssign
	{
	public:
		//midtermCopyAndAssign(); // default
		midtermCopyAndAssign(int x, const char* name);
		midtermCopyAndAssign(const midtermCopyAndAssign& other);
		virtual ~midtermCopyAndAssign();

		midtermCopyAndAssign& operator=(const midtermCopyAndAssign& rhs);

	private:
		int mX;
		const char* mName[CHAR_MAX_SIZE];
		
	};
}


// MidtermCopyAndAssign.cpp

#include <iostream>

#include "midtermCopyAndAssign.h"

namespace midterm
{
	midtermCopyAndAssign::midtermCopyAndAssign(int x, const char* name)
		: mX(x)
	{
		mName = name;
	}

	midtermCopyAndAssign::midtermCopyAndAssign(const midtermCopyAndAssign& other)
		: mX(other.mX)
	{
		mName = other.mName;
	}

	midtermCopyAndAssign::~midtermCopyAndAssign()
	{
		delete[] mName;
	}

	midtermCopyAndAssign& midtermCopyAndAssign::operator=(const midtermCopyAndAssign& rhs)
	{
		if (this != &rhs)
		{
			delete[] mName;
			mName = new const char[CHAR_MAX_SIZE];


			mX = rhs.mX;
			memcpy(mName, rhs.mName, sizeof(char*) * CHAR_MAX_SIZE);

		}

		return *this;
	}

}
