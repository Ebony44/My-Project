// Reference


1. can't be NULL
2. must be declared when initializing
3. it's just another name, nickname..

Pros

1. can't be NULL -> there is no nullptr. unlike pointer... it's valid
2. can't be access the memory that we don't own




int main()
{

	int a = 100;
	int b = 200;

	swap(a, b);

	//now a is 200, b is 100...
}
void Swap(int& x, int& y)
{
	int temp;

	temp = x;
	x = y;
	y = temp;
}



// call by value

void Swap(int arg1, int arg2)
{
	int temp = arg1;
	arg1 = arg2;
	arg2 = temp;
}

int main()
{
	int num1 = 10;
	int num2 = 20;
	Swap(num1, num2);

}


// call by reference

// primitive

void Swap(int* arg1, int* arg2)
{
	int temp = *arg1;
	*arg1 = *arg2;
	*arg2 = temp;
}

int main()
{
	int num1 = 10;
	int num2 = 20;
	Swap(&num1, &num2);

}

// object

void Increase(MyArgument* argument)
{
	argument->mNumber = argument->mNumber + 1;

}

int main()
{
	MyArgument argument;
	argument.mNumber = 100;
	Increase(&argument);
}