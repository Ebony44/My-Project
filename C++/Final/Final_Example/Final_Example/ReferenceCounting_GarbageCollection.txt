참조 카운팅

동작:
포인터의 참조횟수를 둬서 아무도 이를 참조하지 않으면 해당 자원을 해제.

장점:
	실시간 프로그래밍, 고성능을 요구하는 곳에서 사용
단점:
	*** 참조 횟수는 자주 바뀜
	*** 순환 참조의 문제

가비지 컬렉션

동작:
*(메모리가 가득 차면), 가비지 컬렉션이 호출되서 모든 자원에 대한 체크를 한다.
->(충분한 여유 메모리가 없으면)
이후 쓰이지 않는 메모리가 있다면 이를 해제한다.

C#, JAVA 등이 이 방식을 사용

장점:
	쓰기 간편함
단점:
	실시간 프로그래밍이나 고성능을 요구하는 곳에선 적합치 않음



동작 방식

쓰임새, 장점

장점에서 더 나아가서 새롭게 쓰이는 방안

문제점, 단점

문제점을 개선한 방안