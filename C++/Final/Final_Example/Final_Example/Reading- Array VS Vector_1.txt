- 벡터

1. 어떤 자료형도 넣을 수 있는 "동적" 배열 (자동으로 사이즈를 늘려준다. std::string처럼...)
- 기본 데이터
- 클래스
- 포인터
등의 자료형을 넣을 수 있음.


2. 저장된 모든 요소들이 "연속된" 메모리 공간에 위치함.
3. 요소가 증가함에 따라서 메모리를 자동으로 관리해 줌
-> 한 마디로 벡터는 배열인데, 이러한 요소들(메모리 자동 관리, 크기를 자동으로 늘려줌 등)이 있는 배열인 것이다.
4. 어떤 요소에도 임의로 접근이 가능(이는 배열과 같다.)

공통점: 임의 접근(Random Access)

차이점: 벡터는 메모리 자동관리, 크기를 자동으로 늘려주는 등의 장점이 존재.
 -> 재할당, 파편화가 심하게 일어날 수 있다는 단점도 가져가야지?


 벡터 만들기
 1.
 std::vector<int> scores;
 std::vecotr<string> names;
 
 std::vector<Cat> myCats;
 std::vector<Cat*> myCats;

 2.

 std::vector<int> scores;

 scores.push_back(1);
 scores.push_back(2);

 // 복사생성자 쓰기.
 std::vector<int> scores1(scores);

 3. 
 std::vector<int> scores(10);
 요소 10개를 포함하는 공간을 잡아줌. (capacity 10, size 10, 모든 요소는 0.)
 요소가 집어넣어져있는 게 문제가 될 수 있다..?

 std::vector<int> scores2;
	
scores2.reserve(10);
이런 식으로 만들었을 경우엔 capacity 10, size 0, 요소가 안 들어가있음. 두 개를 비교하자면 혼동의 여지가 적어서?
