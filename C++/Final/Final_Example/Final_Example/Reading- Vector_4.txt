- 벡터

reserve()
-> 용량이 증가해야 한다면 새로운 저장공간을 재할당하고 기존 요소들을 모두 새 공간으로 복사.


-- 용량과 크기
 capacity, size


-- 중간에 있는 요소 삽입하기, 제거하기

	std::vecotr<int> scores;
	scores.reserve(4);
	scores.push_back(10);
	scores.push_back(50);
	scores.push_back(30);
	scores.push_back(100);

	std::vector<int>::iterator it = scores.begin();
	// 10, 50, 30, 100
	it++;
	it = scores.inesert(it, 80);
	// 10, 80, 50, 30, 100

	it--;
	it = scores.erase(it);
	// 80, 50, 30, 100


-- 반복자

-- 복사 문제

 하나를 넣을 때, 모든 요소를 다 밀어버려야 한다 -> 요소 수만큼의 시간소요 발생.

 -- 재할당+ 복사 문제

 reserve된 (혹은 잡고 있을 수 있는 메모리가) 충분치 않을 경우, 새롭게 할당해야 한다.
 -> 파편화



 -- 벡터 교환하기

 vector<int> scores;
 vector<int> anotherScores;

 scores.swap(anotherScores);

 --- 벡터 교환하기의 연산이 느리지 않은(그리고 리소스상 비싸지 않은) 이유
 주소값만 교환하면 되니까.


 -- 벡터의 크기 변경
 resize()
 기존 크기보다 작으면 초과분이 제거
 기존 크기보다 크면 재할당.

 --- reserve() VS resize()
 capacity 10, size 10인 경우
 이 상태에서 reserve(2); 같은 짓을 해도 capacity도, size도 변경이 없다.
 resize(2)를 할 경우, capacity 10, size 2가 되며, 초과분은 삭제된다.

 size()
 현재 사이즈를 unsigned int로 반환


push_back()

pop_back()

find()

clear()
-> 모든 요소 제거, 용량은 변하지 않음




 - 개체 벡터
 vector<Score> scores;

 -- 주의할 점

 while(iter != scores.end())
 {
	if(iter->GetClassName() == "Java")
	{
		iter = scores.erase(iter);
	}
	else
	{
		iter++;
	}
 }

 erase 하면 그 위치가 다음 게 오게 되버린다. -> 
	즉 지우고 나서 지우고 난 다음에 올 요소는 확인하지 못하게 된다!
 왜 for문 대신에 while 문을 쓰는가? -> erase 후에 전체 크기가 엉망이 된다. 따라서 
 정해진 사이즈만큼을 처리하는 for문보단 while문이 훨씬 더 유용하고 코드 짜기도 쉬울 것.

 -- 개체를 직접 보관하는 벡터의 문제점 1

 ->해결책, 포인터를 저장하는 벡터(자바의 방식이기도 함)
 포인터를 저장하는 방식이 아니라면, 
 개체의 사이즈만큼을 벡터에 집어넣어야 해서 재할당 시에 엄청나게 비싼 연산이 필요
 -> 주의, 개체를 포인터로 만들었으면 delete를 잊지 마라.
 for(auto iter = scores.begin(); iter != scores.end(); ++iter)
 {
	delete *iter;
 }


 - 포인트 벡터

 vector<score*> v2;
 auto iter = v2.begin();
 while(iter != v2.end())
 {
	Score* score = *iter;
	if(score->GetClassName() == "asdf")
	{
		iter = v2.erase(iter);
	}
	else
	{
		++iter;
	}
 }


- 벡터

1. 어떤 자료형도 넣을 수 있는 "동적" 배열 (자동으로 사이즈를 늘려준다. std::string처럼...)
- 기본 데이터
- 클래스
- 포인터
등의 자료형을 넣을 수 있음.


2. 저장된 모든 요소들이 "연속된" 메모리 공간에 위치함.
3. 요소가 증가함에 따라서 메모리를 자동으로 관리해 줌
-> 한 마디로 벡터는 배열인데, 이러한 요소들(메모리 자동 관리, 크기를 자동으로 늘려줌 등)이 있는 배열인 것이다.
4. 어떤 요소에도 임의로 접근이 가능(이는 배열과 같다.)

공통점: 임의 접근(Random Access)

차이점: 벡터는 메모리 자동관리, 크기를 자동으로 늘려주는 등의 장점이 존재.
 -> 재할당, 파편화가 심하게 일어날 수 있다는 단점도 가져가야지?

 장점:	순서에 상관없이 임의 접근 가능(앞에서부터 접근할 필요 X)
		제일 마지막 위치에 요소를 빠르게 삽입 및 삭제 가능.

 단점:	중간에 요소 삽입 및 삭제가 느림.
		재할당 및 요소 복사에 드는 비용이 있음.