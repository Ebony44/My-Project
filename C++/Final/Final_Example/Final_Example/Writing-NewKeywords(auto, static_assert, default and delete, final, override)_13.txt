- auto 키워드
-> 데이터형을 자동으로 추론해줌
-> JavaScript 등의 언어에 있는 동적인 형(type)과는 다름.
-> 실제 자료형은 컴파일하는 동안 결정됨
-> 따라서, 반드시 auto 변수를 초기화해야 됨.
	--> 참조처럼 반드시 변수 초기화 필요.


example
auto x;				// 에러
auto x = "Chris"	// 올바름, 아주 좋은 예는 아니지만...

- auto를 사용하여 포인터와 참조 받기
포인터: auto 또는 auto*
참조: auto&

-> 가독성을 위해 포인터는 auto*로 받는다. auto로도 받을 순 있지만 말이지.


- reference

Cat myCat("Coco", 2);
Cat& myCatRef = myCat;
auto anotherMyCatRef = myCatRef;

-> myCat과 myCatRef는 같은 주소, anotherMyCatRef는 Cat* 타입이고 앞의 둘과 다른 주소를 가진다.


- const 

const int b = 1;
auto& a = b;
-> const를 이어 받긴 한다.
--> 하지만 가독성에 좋지 않으니, const를 받을 땐 const auto, const auto& 식으로 받자


- auto와 함수 반환형
-> auto 키워드는 함수가 반환하는 걸 저장하는 데 때론 유용하다.


- auto의 베스트 프랙티스
1. 반복자
2. 템플릿형 받기
-> 
MyArray<int>* a = new MyArray<int>(10);		// 이 코드를
-> auto* a = new MyArray<int>(10);			// 이렇게.

- 베스트 프랙티스(자세히)
-- 명시적이어야 함
	--- 실제 자료형 권장
	--- 템플릿 매개변수와 반복자는 auto 사용
	--- auto보다 auto*
	--- auto&보다 const auto&
-- 전부 가독성과 관련된 것



- static_assert

-- 컴파일 중에 어서션 평가
-- 컴파일러가 assert 조건이 참인지 아닌지 앎
-- 실패하면 컴파일러가 컴파일러 에러를 뱉음
-- 많은 경우에 유용
-- c++11에서 선호할 만한 기능

- 어디다 쓸까?
-> 예시 1 구조체의 크기
-> 예시 2 Version 확인하기
-> 예시 3 배열의 길이
--> 

static_assert(
	sizeof(mScores) / sizeof(mScores[0]) == MAX_SCORES
	"The size of scores vector is not 10");
	// 이하 코드 생략
	
- static_assert 베스트 프랙티스
-- 최대한 assert보다 static_assert를 사용
---> 모든 곳에 static_assert를 쓰자
---> 그러고 나서 모든 곳에 assert를 쓰자

-- assert를 사용한다면
--- 여전히 프로그램을 실행시켜야 함.
--- 실행 도중에만 어서션을 포착, 그것도 오직 디버그 빌드에서만.

-- static_assert를 사용한다면
--- 컴파일 중에 모든 문제를 즉시 알아챔
--- 또한 컴파일러처럼 생각하는 데도 도움이 됨!




- 고정폭 정수형
-> int8_t, 16_t, 32_t, uint8_t, 16_t, 32_t
-> intptr_t, uintptr_t



- enum class
-> 그 이전엔 문제가 생길 여지가 있었다. 

eScoreType type = Midterm;
eStudyType studyType = Fulltime;

int num = Assignment3;
if (type == Fulltime)
{
	//....
}

-> 위처럼 다른 enum끼리 비교하려고 들 때 에러를 내뱉지 않아서 문제가 될 수 있었다.

->따라서 이를 해결하기 위해 나온 것이 enum class

eScoreType score = eScoreType::Midterm;
eStudyType studyType = eStudyType::Fullttime;

int num = eScoreType::Assignment3;		// 이제 에러가 난다

if (score == eStudyType::Fulltime)		// 마찬가지로 이것도 이제 에러
{
	// ....
}

-- c++11에서 제대로 지원
-- 정수형으로의 암시적 캐스팅 X
-- 자료형 검사를 이제 한다
-- 또한 enum에 할당할 바이트 양을 정할 수도 있음

대신 이렇게 바꾸면

for (int i = eScoreType::Assignment1;
		i < eScoreType::Count;
		++i
	)
	{
		//...
	}
	// 위 코드는 이제 컴파일이 되지 않음

for (int i = static_cast<int> (eScoreType::Assignment1);
		i < static_cast<int> (eScoreType::Count);
		++i
		{
			//..
		}
	// 이렇게 static_cast로 조금 번거롭게 해야 컴파일 가능
// 이제 어지간해선 enum class를 쓰라
// 예외 -> 정적으로 배열 초기화 할땐 그냥 enum 써도 오케이