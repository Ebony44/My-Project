
- 셋

-- 정렬되는 컨테이너
-- 중복되지 않는 키를 요소로 저장함
-- 역시 이진 탐색 트리 기반

-> 맵과 거의 같다, 맵에서 값을 뺀 것과 같다. 셋은 맵에서 키만을 가진 것.
-> 맵에서 키는 중복이 안 되었으니.


셋에서의 문제점도 맵과 같다.

int main()
{
	std::set<std::string> names;
	names.insert("Victor");
	names.insert("Lulu");
	names.insert("Mocha");

	for (auto iter = names.begin();iter != names.end(); ++iter)
	{
		std::cout << *iter << std::endl;
	}

	// -> 정렬된다 알파벳순으로.... 
	// 이런 정렬을 원치 않으면 어찌하는가..

}

-- 맵과 같은 문제, 요소 삽입/ 제거가 빈번할 경우 느릴 수 밖에 없다
(매 삽입 삭제마다 이 정렬하는 짓을 하기 때문에)

- unordered_set

위의 문제를 해결한 셋.
삽입 삭제가 빈번하다면 아주 유용.


공통점: 키들을 저장
차이점: 
	이진 탐색트리 VS 해쉬 테이블
	탐색시간 O(log N) VS	O(1) 해쉬충돌이 없다면
							O(n) 최악의 경우.

삽입과 제거가 빈번하면 느리다 VS 버킷 때문에 메모리 사용량이 증가함.
