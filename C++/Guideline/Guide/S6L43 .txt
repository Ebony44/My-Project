스택과 힙

힙: 힙으로 가는 순간 모든 게 다 포인터다.
따라서 이를 받을 때도

Vector* v2 = new Vector();

포인터로 받는다.

every Heap is pointer


스택은 일반적으로 힙보다 빠르다.
컴파일 중에 크기를 알 수 있다.



스택을 쓸 수 있다면 스택을 쓰는 게 좋다.

하지만..

1. 실행중에 뭔가 새로 만들어야 하거나
2. 한 함수가 그 scope 내에서 안 끝나고 여기 저기 불려 가야한다거나..등
3. 반환값으로 처리해서 스택에 쌓을 수도 있지만 -> 그 해당하는 반환값이(Object가 반환값이고 너무 많은 정보를 담고 있다면
) 너무 크다면...  -> 힙으로 처리.

오브젝트 크기가 작다, 특히 어느 범위에서만 쓴다면 -> 스택에 넣어라
크다 -> 힙에 넣어라

번외

const Something& s

참조로 받는 이유: 데이터를 복사 안 하는 게 더 빠를 것 같다
const: 하지만 쓰는 내부에서 이 값을 바꿀 생각은 없다.

번외 2

함수 안에서 new ~~() 하는건 좋은 예가 아니다. 그림 S6L43_7 참조. ->RAII

RAII

Resource Accquisition is initialization
리소스를 갖는 건 초기화다. -> 

초기화할 때 리소스를 잡아주고 
사라질 때 지워준다.

BUT...
어쩔 수 없이 함수에서 new를 행해야 하는 경우가 있다.
----> 디자인 패턴-팩토리 패턴: 이를 호출 시 오브젝트를 알아서 생성해준다. 가령 팩토리 패턴의 Create()라는 함수를 구현 후
새로 만든 오브젝트라는 게 명백하므로 -> 
호출자가 팩토리 패턴을 구현한 메서드에서 나온 오브젝트를 삭제해줘야 한다 -> 메모리 책임이 명백하다.